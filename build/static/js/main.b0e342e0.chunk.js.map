{"version":3,"sources":["components/spinner.gif","store.js","components/layout/AppNavBar.js","components/layout/Job.js","components/layout/Spinner.js","components/layout/JobDetail.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","store","compose","reactReduxFirebase","userProfile","useFirestoreForProfile","reduxFirestore","createStore","createStoreWithFirebase","combineReducers","firebaseReducer","firestoreReducer","window","__REDUX_DEVTOOLS_EXTENSION__","AppNavBar","react_default","a","createElement","className","react_router_dom","to","type","data-toggle","data-target","id","href","Job","handleApplyNow","console","log","handleSeeMore","e","preventDefault","concat","_this2","this","jobs","props","map","j","key","title","hiringCompany","city","country","salary","value","onClick","Component","firestoreConnect","collection","connect","state","ordered","Spinner","src","spinner","alt","style","margin","display","width","JobDetail","handleClick","job","_this","layout_Spinner","storeAs","doc","match","params","_ref","App","es","layout_AppNavBar","react_router","exact","path","component","Boolean","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b0e342e0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.8b9a5cd1.gif\";","import { createStore, combineReducers, compose } from \"redux\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport { reactReduxFirebase, firebaseReducer } from \"react-redux-firebase\";\nimport { reduxFirestore, firestoreReducer } from \"redux-firestore\";\n// Reducers\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyBqyLKGfSDU2-eXcwBuUFw1EYYTEsMCmN0\",\n  authDomain: \"connect-the-x.firebaseapp.com\",\n  databaseURL: \"https://connect-the-x.firebaseio.com\",\n  projectId: \"connect-the-x\",\n  storageBucket: \"connect-the-x.appspot.com\",\n  messagingSenderId: \"401012072513\",\n  appId: \"1:401012072513:web:300f9955d54ad898\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n// Init Firestore\nfirebase.firestore();\n\n// react-redux-firebase config\nconst rrfConfig = {\n  userProfile: \"users\",\n  useFirestoreForProfile: true // Firestore for Profile instead of Realtime DB\n};\n\n// Add reactReduxFirebase enhancer when making store creator\nconst createStoreWithFirebase = compose(\n  reactReduxFirebase(firebase, rrfConfig), // firebase instance as first argument\n  reduxFirestore(firebase) // <- needed if using firestore\n)(createStore);\n\n// Add firebase to reducers\nconst rootReducer = combineReducers({\n  firebase: firebaseReducer,\n  firestore: firestoreReducer // <- needed if using firestore\n});\n\n// Create store with reducers and initial state\nconst initialState = {};\nconst store = createStoreWithFirebase(\n  rootReducer,\n  initialState,\n  compose(\n    reactReduxFirebase(firebase),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\nexport default store;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction AppNavBar() {\n  return (\n    <nav className=\"navbar navbar-expand-md navbar-light bg-info mb-4\">\n      <div className=\"container\">\n        <h3>\n          <Link to=\"/\" className=\"nav-brand text-light\">\n            ConnectX\n          </Link>\n          {\"      \"}\n          <i className=\"fas fa-grip-lines-vertical text-light\" />\n        </h3>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarMain\"\n        >\n          <span className=\"navbar-toggler-icon\" />\n        </button>\n        <div className=\"navbar-collapse collapse\" id=\"navbarMain\">\n          <ul className=\"navbar-nav ml-auto\">\n            <li className=\"nav-item\">\n              <a href=\"!#\" className=\"nav-link text-light\">\n                Post a job\n              </a>\n            </li>\n            <li className=\"nav-item\">\n              <a href=\"!#\" className=\"nav-link text-light\">\n                Find a job\n              </a>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nexport default AppNavBar;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { firestoreConnect } from \"react-redux-firebase\";\n\nclass Job extends Component {\n  handleApplyNow = () => {\n    console.log(\"Apply now clicked\");\n  };\n\n  handleSeeMore = e => {\n    e.preventDefault();\n    console.log(`See more clicked and ${e.id}`);\n  };\n\n  render() {\n    const { jobs } = this.props;\n\n    return (\n      <div className=\"container\">\n        <h1 className=\"mb-4\">\n          Job Listings <i className=\"fas fa-arrow-up\" />\n        </h1>\n        <div className=\"row\">\n          {jobs\n            ? jobs.map(j => {\n                return (\n                  <div className=\"col-4 mb-4\" key={j.id}>\n                    <div className=\"card\">\n                      <div className=\"card-header text-info font-weight-bold\">\n                        {j.title}\n                      </div>\n                      <div className=\"card-body\">\n                        <strong>{j.hiringCompany}</strong>\n                        <br />\n                        {j.city}, {j.country}\n                        <br />\n                        Salary: RM {j.salary}\n                      </div>\n                    </div>\n                    <input\n                      type=\"button\"\n                      className=\"btn btn-outline-success col-6\"\n                      value=\"Apply Now\"\n                      onClick={this.handleApplyNow}\n                    />\n                    <Link\n                      to={`/job/${j.id}`}\n                      className=\"btn btn-outline-danger col-6\"\n                    >\n                      See More <i className=\"fas fa-info-circle\" />\n                    </Link>\n                  </div>\n                );\n              })\n            : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nJob.propTypes = {\n  firestore: PropTypes.object.isRequired\n};\n\nexport default compose(\n  firestoreConnect([{ collection: \"jobs\" }]),\n  connect(state => ({\n    jobs: state.firestore.ordered.jobs\n  }))\n)(Job);\n","import React from \"react\";\nimport spinner from \"../spinner.gif\";\n\nfunction Spinner() {\n  return (\n    <div>\n      <img\n        src={spinner}\n        alt=\"Loading...\"\n        style={{ margin: \"auto\", display: \"block\", width: \"70px\" }}\n      />\n    </div>\n  );\n}\n\nexport default Spinner;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { firestoreConnect } from \"react-redux-firebase\";\nimport Spinner from \"./Spinner\";\n\nclass JobDetail extends Component {\n  handleClick = e => {\n    const { job } = this.props;\n    console.log(job.title);\n  };\n  render() {\n    const { job } = this.props;\n\n    if (job) {\n      return (\n        <div className=\"container\">\n          <h3>Job Detail</h3>\n          <div className=\"row\">\n            <div className=\"col-sm-8\">\n              <h4>\n                <span className=\"text-info\">We are looking for: </span>{\" \"}\n                {job.title}\n              </h4>\n            </div>\n            <div className=\"col-sm-4 bg-success text-white d-flex flex-column justify-content-center\">\n              Expected salary: RM {job.salary}\n            </div>\n          </div>\n\n          <p>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n            eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim\n            ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n            aliquip ex ea commodo consequat. Duis aute irure dolor in\n            reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n            pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n            culpa qui officia deserunt mollit anim id est laborum.\n          </p>\n          <button\n            className=\"btn btn-primary btn-block\"\n            onClick={this.handleClick}\n          >\n            Apply now\n          </button>\n        </div>\n      );\n    } else {\n      return <Spinner />;\n    }\n  }\n}\n\nJobDetail.propTypes = {\n  firestore: PropTypes.object.isRequired\n};\n\nexport default compose(\n  firestoreConnect(props => [\n    {\n      collection: \"jobs\",\n      storeAs: \"job\",\n      doc: props.match.params.id\n    }\n  ]),\n  connect(({ firestore: { ordered } }, props) => ({\n    job: ordered.job && ordered.job[0]\n  }))\n)(JobDetail);\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nimport AppNavBar from \"./components/layout/AppNavBar\";\nimport Job from \"./components/layout/Job\";\nimport JobDetail from \"./components/layout/JobDetail\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n        <div className=\"App\">\n          <AppNavBar />\n          <Switch>\n            <Route exact path=\"/\" component={Job} />\n            <Route exact path=\"/job/:id\" component={JobDetail} />\n          </Switch>\n        </div>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}